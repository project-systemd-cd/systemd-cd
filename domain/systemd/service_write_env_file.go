package systemd

import (
	"bytes"
	"fmt"
	"strings"
	"systemd-cd/domain/logger"
	"systemd-cd/domain/toml"
	"systemd-cd/domain/unix"
)

// writeEnvFile implements iSystemdService
func (s Systemd) writeEnvFile(e map[string]string, path string) (err error) {
	logger.Logger().Debug("-----------------------------------------------------------")
	logger.Logger().Debug("START - Write systemd env file")
	logger.Logger().Debugf("< env = %+v", e)
	logger.Logger().Debugf("< path = %v", path)
	logger.Logger().Debug("-----------------------------------------------------------")
	defer func() {
		logger.Logger().Debug("-----------------------------------------------------------")
		if err == nil {
			logger.Logger().Debug("END   - Write systemd env file")
		} else {
			logger.Logger().Error("FAILED - Write systemd env file")
			logger.Logger().Error(err)
		}
		logger.Logger().Debug("-----------------------------------------------------------")
	}()

	// Check env file path and mkdir
	if strings.HasSuffix(path, "/") {
		err := fmt.Errorf("service env file path %v is not a file", path)
		return err
	}
	if !strings.HasPrefix(path, "/") {
		err := fmt.Errorf("service env file path %v must be absolute", path)
		return err
	}
	err = unix.MkdirIfNotExist("/" + strings.Join(strings.Split(path, "/")[1:len(strings.Split(path, "/"))-1], "/"))
	if err != nil {
		return err
	}

	// Encode
	b := &bytes.Buffer{}
	// Add annotation
	b.WriteString("#! Generated by systemd-cd\n")
	indent := ""
	err = toml.Encode(b, e, toml.EncodeOption{Indent: &indent})
	if err != nil {
		return err
	}

	// Write to file
	err = unix.WriteFile(path, b.Bytes())
	if err != nil {
		return err
	}

	return err
}
