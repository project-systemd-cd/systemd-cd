package systemd

import (
	errorss "errors"
	"os"
	"strings"
	"systemd-cd/domain/errors"
	"systemd-cd/domain/logger"
)

// GetService implements IService
func (s Systemd) GetService(name string) (us unitService, err error) {
	logger.Logger().Debug("-----------------------------------------------------------")
	logger.Logger().Debug("START - Instantiate systemd unit service")
	logger.Logger().Debugf("< name = %v", name)
	logger.Logger().Debug("-----------------------------------------------------------")
	defer func() {
		logger.Logger().Debug("-----------------------------------------------------------")
		var ErrNotFound *errors.ErrNotFound
		if err == nil || errorss.As(err, &ErrNotFound) {
			logger.Logger().Tracef("> unitService.Name = %+v", us.Name)
			logger.Logger().Tracef("> unitService.unitFile = %+v", us.unitFile)
			logger.Logger().Tracef("> unitService.Path = %+v", us.Path)
			logger.Logger().Tracef("> unitService.EnvironmentFileValues = %+v", us.EnvironmentFileValues)
			logger.Logger().Debug("END   - Instantiate systemd unit service")
		} else {
			logger.Logger().Error("FAILED - Instantiate systemd unit service")
			logger.Logger().Error(err)
		}
		logger.Logger().Debug("-----------------------------------------------------------")
	}()

	us.systemctl = s.systemctl
	us.Name = name

	// load unit file
	path := strings.Join([]string{s.unitFileDir, name, ".service"}, "")
	uf, isGeneratedBySystemdCd, err := s.loadUnitFileSerivce(path)
	if os.IsNotExist(err) {
		err = &errors.ErrNotFound{Object: "unit file", IdName: "path", Id: path}
		return
	}
	if !isGeneratedBySystemdCd {
		// unit file already exists and file not generated by systemd-cd
		err = ErrUnitFileNotManaged
		return
	}
	if err != nil {
		// fail
		return
	}

	var env map[string]string
	if uf.Service.EnvironmentFile != nil {
		// load env file
		envPath := *uf.Service.EnvironmentFile
		var isGeneratedBySystemdCd bool
		env, isGeneratedBySystemdCd, err = s.loadEnvFile(envPath)
		if os.IsNotExist(err) {
			err = &errors.ErrNotFound{Object: "unit env file", IdName: "path", Id: envPath}
			return
		}
		if !isGeneratedBySystemdCd {
			// unit file already exists and file not generated by systemd-cd
			err = ErrUnitEnvFileNotManaged
			return
		}
		if err != nil {
			// fail
			return
		}
	}

	us.unitFile = uf
	us.Path = path
	us.EnvironmentFileValues = env
	return us, nil
}
